import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import '../styles/CheckoutPage.css';

function CheckoutPage({ cart, clearCart }) {
  const [address, setAddress] = useState('');
  const [comment, setComment] = useState('');
  const [user, setUser] = useState(null); // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const navigate = useNavigate();

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    const fetchUserProfile = async () => {
      try {
        const response = await fetch('http://localhost:8080/api.php?action=profile', {
          credentials: 'include', // –í–∞–∂–Ω–æ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –∫—É–∫
        });
        const data = await response.json();
        if (data.id) {
          setUser(data); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        } else {
          console.error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è:', error);
      }
    };

    fetchUserProfile();
  }, []);

  const handleOrderSubmit = async () => {
    if (!cart || cart.length === 0) {
      alert("‚ö†Ô∏è –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!");
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
    if (!user) {
      alert("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω!");
      return;
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–∫–∞–∑–∞
    const orderData = {
      address,
      comment,
      total: cart.reduce((sum, item) => sum + item.price * item.quantity, 0),
      items: cart.map(item => ({
        id: item.id,
        quantity: item.quantity,
        price: item.price,
      })),
    };

    try {
      const response = await fetch("http://localhost:8080/api.php?action=create_order", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        credentials: 'include', // –í–∞–∂–Ω–æ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –∫—É–∫
        body: JSON.stringify(orderData),
      });

      const data = await response.json();
      if (data.success) {
        clearCart();
        navigate(`/order-confirmation/${data.order_id}`);
      } else {
        alert("‚ùå –û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: " + data.message);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞:', error);
      alert("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä");
    }
  };

  return (
    <div className="checkout-page">
      <h1>üì¶ –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</h1>
      <label>üè† –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</label>
      <input
        type="text"
        value={address}
        onChange={(e) => setAddress(e.target.value)}
        placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å"
      />

      <label>üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</label>
      <textarea
        value={comment}
        onChange={(e) => setComment(e.target.value)}
        placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∫ –∑–∞–∫–∞–∑—É"
      ></textarea>

      <button className="submit-order-btn" onClick={handleOrderSubmit}>
        ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑
      </button>
    </div>
  );
}

export default CheckoutPage;